{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Startseite Diese Seite wird gerade \u00fcberarbeitet. Weitere Informationen sind in K\u00fcrze verf\u00fcgbar.","title":"Startseite"},{"location":"#startseite","text":"Diese Seite wird gerade \u00fcberarbeitet. Weitere Informationen sind in K\u00fcrze verf\u00fcgbar.","title":"Startseite"},{"location":"datenuebertragung/","text":"Daten\u00fcbertragung ben\u00f6tigte Module: - Mikrocontroller (2x)","title":"Daten\u00fcbertragung"},{"location":"datenuebertragung/#datenubertragung","text":"ben\u00f6tigte Module: - Mikrocontroller (2x)","title":"Daten\u00fcbertragung"},{"location":"datenuebertragung/api/","text":"API (Dokumentation der Funktionen) encode Beschreibung Die Funktion codiert einen Buchstaben, wandelt ihn also in eine Bitfolge (7 Bit) um. Syntax encode(x) Parameter x: Buchstabe im Datentyp char . R\u00fcckgabewert Eine Bitfolge vom Datentyp byte8_t . Beispiele byte8_t bitsequence; bitsequence = encode('H'); display(bitsequence); // Das Display zeigt '10010000' decode Beschreibung Die Funktion decodiert eine Bitfolge, wandelt sie also in einen Buchstaben um. Syntax decode(x) Parameter x: Bitfolge vom Datentyp byte8_t . R\u00fcckgabewert Ein Buchstabe vom Datentyp char . Beispiele byte8_t bitsequence; bitsequence = encode('H'); char output; output = decode (bitsequence); display(output); // Das Display zeigt 'H' parity Beschreibung Die Funktion parity erzeugt ein Parit\u00e4tsbit zu einer gegebenen Bitfolge, h\u00e4ngt es an die Bitfolge an und gibt diese dann zur\u00fcck. Syntax parity(x) Parameter x: eine Bitfolge vom Datentyp byte8_t. R\u00fcckgabewerte Eine Bitfolge vom Datentyp byte8_t. Beispiele byte8_t bitsequence; bitsequence = encode('H'); bitsequence = parity(bitsequence); display(bitsequence); // Das Display zeigt '10010000' check Beschreibung Die Funktion check kontrolliert die Parit\u00e4t einer Bitfolge. Sie liefert eine 1, falls die Parit\u00e4t stimmt und eine 0, falls die Parit\u00e4t nicht stimmt. Syntax check(x) Parameter x: eine Bitfolge vom Datentyp byte8_t. R\u00fcckgabewerte true, falls die die Parit\u00e4t stimmt. false, falls ein Fehler festgestellt wurde und die Parit\u00e4t nicht stimmt. Datentyp bool. Beispiele byte8_t bitsequence; bitsequence = encode('H'); bitsequence = parity(bitsequence); bool result; result = check(bitsequence); display(result); // Das Display zeigt 'T'","title":"API"},{"location":"datenuebertragung/api/#api-dokumentation-der-funktionen","text":"","title":"API (Dokumentation der Funktionen)"},{"location":"datenuebertragung/api/#encode","text":"","title":"encode"},{"location":"datenuebertragung/api/#beschreibung","text":"Die Funktion codiert einen Buchstaben, wandelt ihn also in eine Bitfolge (7 Bit) um.","title":"Beschreibung"},{"location":"datenuebertragung/api/#syntax","text":"encode(x)","title":"Syntax"},{"location":"datenuebertragung/api/#parameter","text":"x: Buchstabe im Datentyp char .","title":"Parameter"},{"location":"datenuebertragung/api/#ruckgabewert","text":"Eine Bitfolge vom Datentyp byte8_t .","title":"R\u00fcckgabewert"},{"location":"datenuebertragung/api/#beispiele","text":"byte8_t bitsequence; bitsequence = encode('H'); display(bitsequence); // Das Display zeigt '10010000'","title":"Beispiele"},{"location":"datenuebertragung/api/#decode","text":"","title":"decode"},{"location":"datenuebertragung/api/#beschreibung_1","text":"Die Funktion decodiert eine Bitfolge, wandelt sie also in einen Buchstaben um.","title":"Beschreibung"},{"location":"datenuebertragung/api/#syntax_1","text":"decode(x)","title":"Syntax"},{"location":"datenuebertragung/api/#parameter_1","text":"x: Bitfolge vom Datentyp byte8_t .","title":"Parameter"},{"location":"datenuebertragung/api/#ruckgabewert_1","text":"Ein Buchstabe vom Datentyp char .","title":"R\u00fcckgabewert"},{"location":"datenuebertragung/api/#beispiele_1","text":"byte8_t bitsequence; bitsequence = encode('H'); char output; output = decode (bitsequence); display(output); // Das Display zeigt 'H'","title":"Beispiele"},{"location":"datenuebertragung/api/#parity","text":"","title":"parity"},{"location":"datenuebertragung/api/#beschreibung_2","text":"Die Funktion parity erzeugt ein Parit\u00e4tsbit zu einer gegebenen Bitfolge, h\u00e4ngt es an die Bitfolge an und gibt diese dann zur\u00fcck.","title":"Beschreibung"},{"location":"datenuebertragung/api/#syntax_2","text":"parity(x)","title":"Syntax"},{"location":"datenuebertragung/api/#parameter_2","text":"x: eine Bitfolge vom Datentyp byte8_t.","title":"Parameter"},{"location":"datenuebertragung/api/#ruckgabewerte","text":"Eine Bitfolge vom Datentyp byte8_t.","title":"R\u00fcckgabewerte"},{"location":"datenuebertragung/api/#beispiele_2","text":"byte8_t bitsequence; bitsequence = encode('H'); bitsequence = parity(bitsequence); display(bitsequence); // Das Display zeigt '10010000'","title":"Beispiele"},{"location":"datenuebertragung/api/#check","text":"","title":"check"},{"location":"datenuebertragung/api/#beschreibung_3","text":"Die Funktion check kontrolliert die Parit\u00e4t einer Bitfolge. Sie liefert eine 1, falls die Parit\u00e4t stimmt und eine 0, falls die Parit\u00e4t nicht stimmt.","title":"Beschreibung"},{"location":"datenuebertragung/api/#syntax_3","text":"check(x)","title":"Syntax"},{"location":"datenuebertragung/api/#parameter_3","text":"x: eine Bitfolge vom Datentyp byte8_t.","title":"Parameter"},{"location":"datenuebertragung/api/#ruckgabewerte_1","text":"true, falls die die Parit\u00e4t stimmt. false, falls ein Fehler festgestellt wurde und die Parit\u00e4t nicht stimmt. Datentyp bool.","title":"R\u00fcckgabewerte"},{"location":"datenuebertragung/api/#beispiele_3","text":"byte8_t bitsequence; bitsequence = encode('H'); bitsequence = parity(bitsequence); bool result; result = check(bitsequence); display(result); // Das Display zeigt 'T'","title":"Beispiele"},{"location":"datenuebertragung/empfangen/","text":"Empfangen #include <desklab.h> const int clockPin = 3; const int dataPin = 4; void setup() { setupReadConnection(dataPin, clockPin); } void loop() { if(availableByte()){ byte8_t bitsequence; bitsequence = readByte(); if(check(bitsequence)){ char output = decode(bitsequence); display(output); delay(1000); clearDisplay(); } else { display('?'); delay(1000); clearDisplay(); } } }","title":"Empfangen"},{"location":"datenuebertragung/empfangen/#empfangen","text":"#include <desklab.h> const int clockPin = 3; const int dataPin = 4; void setup() { setupReadConnection(dataPin, clockPin); } void loop() { if(availableByte()){ byte8_t bitsequence; bitsequence = readByte(); if(check(bitsequence)){ char output = decode(bitsequence); display(output); delay(1000); clearDisplay(); } else { display('?'); delay(1000); clearDisplay(); } } }","title":"Empfangen"},{"location":"datenuebertragung/senden/","text":"Senden #include <desklab.h> const int clockPin = 3; const int dataPin = 4; void setup() { setupWriteConnection(dataPin, clockPin); } void loop() { char input = 'H'; byte8_t bitsequence; bitsequence = encode(input); bitsequence = parity(bitsequence); display(\"H: \"); writeByte(bitsequence, true); delay(1000); clearDisplay(); delay(1000); input = 'E'; bitsequence = encode(input); bitsequence = parity(bitsequence); display(\"E: \"); writeByte(bitsequence, true); delay(1000); clearDisplay(); delay(1000); input = 'L'; bitsequence = encode(input); bitsequence = parity(bitsequence); display(\"L: \"); writeByte(bitsequence, true); delay(1000); clearDisplay(); delay(1000); display(\"L: \"); writeByte(bitsequence, true); delay(1000); clearDisplay(); delay(1000); input = 'O'; bitsequence = encode(input); bitsequence = parity(bitsequence); display(\"O: \"); writeByte(bitsequence, true); delay(1000); clearDisplay(); delay(1000); delay(4000); }","title":"Senden"},{"location":"datenuebertragung/senden/#senden","text":"#include <desklab.h> const int clockPin = 3; const int dataPin = 4; void setup() { setupWriteConnection(dataPin, clockPin); } void loop() { char input = 'H'; byte8_t bitsequence; bitsequence = encode(input); bitsequence = parity(bitsequence); display(\"H: \"); writeByte(bitsequence, true); delay(1000); clearDisplay(); delay(1000); input = 'E'; bitsequence = encode(input); bitsequence = parity(bitsequence); display(\"E: \"); writeByte(bitsequence, true); delay(1000); clearDisplay(); delay(1000); input = 'L'; bitsequence = encode(input); bitsequence = parity(bitsequence); display(\"L: \"); writeByte(bitsequence, true); delay(1000); clearDisplay(); delay(1000); display(\"L: \"); writeByte(bitsequence, true); delay(1000); clearDisplay(); delay(1000); input = 'O'; bitsequence = encode(input); bitsequence = parity(bitsequence); display(\"O: \"); writeByte(bitsequence, true); delay(1000); clearDisplay(); delay(1000); delay(4000); }","title":"Senden"},{"location":"development/","text":"Development This page is under construction. More information will be available soon.","title":"Development"},{"location":"development/#development","text":"This page is under construction. More information will be available soon.","title":"Development"},{"location":"development/changelog/","text":"CHANGELOG v1.2.0 (In Progress) Add measuring-range-exceedance warning. Add Continous Integration via Github Actions for linting, unittests and compilation of example sketches. Add classes for core and photometer for Object Oriented Programming. Rename methods for Procedural Programming. Adapt (and add new) examples to new methods. Improved documentation. Fix IDE Highlighting. v1.1.5 (2020-01-02) Definition of dependencies in library.properties to enable user-friendly installation in Arduino IDE. v1.1.4 (2019-12-10) New methods for Display Control. v1.1.3 (2019-10-24) Fix specification / Arduino Library Manager requirements. v1.1.2 (2019-10-15) Fix specification / Arduino Library Manager requirements. v1.1.1 (2019-09-30) Fix specification / Arduino Library Manager requirements. v1.1.0 (2019-09-15) Add basic methods for the use of desklab Photometer devices.","title":"Changelog"},{"location":"development/changelog/#changelog","text":"","title":"CHANGELOG"},{"location":"development/changelog/#v120-in-progress","text":"Add measuring-range-exceedance warning. Add Continous Integration via Github Actions for linting, unittests and compilation of example sketches. Add classes for core and photometer for Object Oriented Programming. Rename methods for Procedural Programming. Adapt (and add new) examples to new methods. Improved documentation. Fix IDE Highlighting.","title":"v1.2.0 (In Progress)"},{"location":"development/changelog/#v115-2020-01-02","text":"Definition of dependencies in library.properties to enable user-friendly installation in Arduino IDE.","title":"v1.1.5 (2020-01-02)"},{"location":"development/changelog/#v114-2019-12-10","text":"New methods for Display Control.","title":"v1.1.4 (2019-12-10)"},{"location":"development/changelog/#v113-2019-10-24","text":"Fix specification / Arduino Library Manager requirements.","title":"v1.1.3 (2019-10-24)"},{"location":"development/changelog/#v112-2019-10-15","text":"Fix specification / Arduino Library Manager requirements.","title":"v1.1.2 (2019-10-15)"},{"location":"development/changelog/#v111-2019-09-30","text":"Fix specification / Arduino Library Manager requirements.","title":"v1.1.1 (2019-09-30)"},{"location":"development/changelog/#v110-2019-09-15","text":"Add basic methods for the use of desklab Photometer devices.","title":"v1.1.0 (2019-09-15)"},{"location":"development/release/","text":"How to make a new release This page is under construction. More information will be available soon.","title":"Release"},{"location":"development/release/#how-to-make-a-new-release","text":"This page is under construction. More information will be available soon.","title":"How to make a new release"},{"location":"photometer/","text":"Photometer ben\u00f6tigte Module: - Mikrocontroller - Steckbrett - Photometer-Messkammer","title":"Photometer"},{"location":"photometer/#photometer","text":"ben\u00f6tigte Module: - Mikrocontroller - Steckbrett - Photometer-Messkammer","title":"Photometer"},{"location":"photometer/aufbau-schaltung/","text":"Aufbau der Schaltung Der Aufbau der Schaltung ist in den Dokumenten P4 & P5 beschrieben.","title":"Aufbau der Schaltung"},{"location":"photometer/aufbau-schaltung/#aufbau-der-schaltung","text":"Der Aufbau der Schaltung ist in den Dokumenten P4 & P5 beschrieben.","title":"Aufbau der Schaltung"},{"location":"photometer/programmcode/","text":"Programmcode // Einbinden der desklab Bibliothek. #include <desklab.h> // Initialisieren einer Variable zur Speicherung // des Pins, an dem der Sensor angeschlossen ist. int SensorPin = A0; void setup() { // Starten des Displays. photometerSetupDisplay(); } void loop() { // Messung der OD. double OD = photometerMeasureOD(SensorPin); // Ausgabe der OD auf dem Display. photometerPrintOD(OD); // Warten f\u00fcr 200ms. delay(200); }","title":"Programmcode"},{"location":"photometer/programmcode/#programmcode","text":"// Einbinden der desklab Bibliothek. #include <desklab.h> // Initialisieren einer Variable zur Speicherung // des Pins, an dem der Sensor angeschlossen ist. int SensorPin = A0; void setup() { // Starten des Displays. photometerSetupDisplay(); } void loop() { // Messung der OD. double OD = photometerMeasureOD(SensorPin); // Ausgabe der OD auf dem Display. photometerPrintOD(OD); // Warten f\u00fcr 200ms. delay(200); }","title":"Programmcode"},{"location":"start/installation/","text":"Installation In diesem Artikel wird beschrieben, wie die Ger\u00e4te von desklab zusammen mit der Arduino-Entwicklungsumgebung und der bereitgestellten Software-Bibliothek programmiert werden k\u00f6nnen. Bei Fragen oder Problemen, auf die Sie in den Hilfe-Artikeln dieser Seite keine L\u00f6sung finden, k\u00f6nnen Sie uns gerne \u00fcber das Kontaktformular auf unserer Homepage kontaktieren. \u00dcbersicht Installation des Mikrocontroller-Treibers Installation der Arduino Entwicklungsumgebung Installation der ben\u00f6tigten Bibliotheken Upload eines Beispiel-Programms 1. Mikrocontroller-Treiber: Download & Installation Um den in den Ger\u00e4ten der desklab gUG verbauten Mikrocontroller mit der Arduino-Entwicklungsumgebung programmieren zu k\u00f6nnen, ben\u00f6tigen Sie den Treiber CH341SER. Die zur Installation ben\u00f6tigten Dateien k\u00f6nnen Sie von unserer Homepage herunterladen. Sie ben\u00f6tigen dazu die Login-Daten, die Sie zusammen mit der Lieferung oder per E-Mail erhalten haben. F\u00fchren Sie zur Installation des Treibers die folgenden Schritte durch: 1. Trennen Sie per USB angeschlossene desklab-Ger\u00e4te von Ihrem Computer. 2. Laden Sie die Installationsdatei mc_treiber_CH341SER.zip ( Downloadlink )von unserer Website herunter. 3. Speichern und Entpacken Sie die heruntergeladene Datei. 4. F\u00fchren Sie die Datei \"Setup.exe\" aus. 5. W\u00e4hlen Sie im darauf erscheinenden Dialogfenster \u201cInstall\u201d aus und befolgen Sie eventuell erscheinende Mitteilungen. 2. Arduino IDE (Entwicklungsumgebung): Download & Installation Wir empfehlen, die aktuellste von Arduino\u00ae zur Verf\u00fcgung gestellte Version der Entwicklungsumgebung zu installieren. Die zur Installation ben\u00f6tigte(n) Datei(en) k\u00f6nnen unter www.arduino.cc/en/Main/Software heruntergeladen werden. Befolgen Sie zur Installation die dort beschriebenen Schritte. Die Kompatibilit\u00e4t der desklab-Bibliothek (s.u.) mit allen Versionen der Arduino Entwicklungsumgebung seit Version 1.8.6 (Release 2018) wird von uns getestet und sichergestellt. Falls Sie eine nicht unterst\u00fctzte Version der Arduino-Entwicklungsumgebung nutzen, k\u00f6nnen bei der Nutzung der Funktionen der desklab-Bibliothek Probleme und Fehler auftreten. 3. Arduino Bibliotheken In der desklab Arduino Bibliothek werden Funktionen zur Nutzung und Programmierung der Ger\u00e4te der desklab gUG bereitgestellt. Die Bibliothek kann in der Bibliotheksverwaltung der Arduino-Entwicklungsumgebung installiert werden. F\u00fchren Sie zur Installation der Arduino-Bibliothek die folgenden Schritte durch: 1) Trennen Sie per USB angeschlossene desklab-Ger\u00e4te von IhremComputer. 2) \u00d6ffnen Sie die Arduino-Entwicklungsumgebung. 3) \u00d6ffnen Sie die Bibliotheksverwaltung \u00fcber die Men\u00fcleiste der Entwicklungsumgebung. 4) Suchen Sie nach 'desklab' und installieren Sie die neueste Version der Bibliothek. 4. Upload eines Beispiel-Programms In der desklab Arduino Bibliothek sind mehrere Beispielprogramme enthalten, mit denen unter anderem das Photometer zur Messung der optischen Dichte genutzt werden kann. Um zu testen, ob alle Schritte erfolgreich durchgef\u00fchrt wurden, kann ein Beispielprogramm auf den Mikrocontroller geladen werden. Dazu muss die Arduino IDE gestartet und der Mikrocontroller per USB Kabel angeschlossen werden. Nach dem Start der Arduino IDE sollte zum Test ein Beispiel-Sketch der Bibliothek kompiliert und auf den Mikrocontroller geladen werden. Nach wenigen Sekunden sollte der Upload auf den Mikrocontroller abgeschlossen sein und das Programm wird automatisch gestartet.","title":"Installation"},{"location":"start/installation/#installation","text":"In diesem Artikel wird beschrieben, wie die Ger\u00e4te von desklab zusammen mit der Arduino-Entwicklungsumgebung und der bereitgestellten Software-Bibliothek programmiert werden k\u00f6nnen. Bei Fragen oder Problemen, auf die Sie in den Hilfe-Artikeln dieser Seite keine L\u00f6sung finden, k\u00f6nnen Sie uns gerne \u00fcber das Kontaktformular auf unserer Homepage kontaktieren.","title":"Installation"},{"location":"start/installation/#ubersicht","text":"Installation des Mikrocontroller-Treibers Installation der Arduino Entwicklungsumgebung Installation der ben\u00f6tigten Bibliotheken Upload eines Beispiel-Programms","title":"\u00dcbersicht"},{"location":"start/installation/#1-mikrocontroller-treiber-download-installation","text":"Um den in den Ger\u00e4ten der desklab gUG verbauten Mikrocontroller mit der Arduino-Entwicklungsumgebung programmieren zu k\u00f6nnen, ben\u00f6tigen Sie den Treiber CH341SER. Die zur Installation ben\u00f6tigten Dateien k\u00f6nnen Sie von unserer Homepage herunterladen. Sie ben\u00f6tigen dazu die Login-Daten, die Sie zusammen mit der Lieferung oder per E-Mail erhalten haben. F\u00fchren Sie zur Installation des Treibers die folgenden Schritte durch: 1. Trennen Sie per USB angeschlossene desklab-Ger\u00e4te von Ihrem Computer. 2. Laden Sie die Installationsdatei mc_treiber_CH341SER.zip ( Downloadlink )von unserer Website herunter. 3. Speichern und Entpacken Sie die heruntergeladene Datei. 4. F\u00fchren Sie die Datei \"Setup.exe\" aus. 5. W\u00e4hlen Sie im darauf erscheinenden Dialogfenster \u201cInstall\u201d aus und befolgen Sie eventuell erscheinende Mitteilungen.","title":"1. Mikrocontroller-Treiber: Download &amp; Installation"},{"location":"start/installation/#2-arduino-ide-entwicklungsumgebung-download-installation","text":"Wir empfehlen, die aktuellste von Arduino\u00ae zur Verf\u00fcgung gestellte Version der Entwicklungsumgebung zu installieren. Die zur Installation ben\u00f6tigte(n) Datei(en) k\u00f6nnen unter www.arduino.cc/en/Main/Software heruntergeladen werden. Befolgen Sie zur Installation die dort beschriebenen Schritte. Die Kompatibilit\u00e4t der desklab-Bibliothek (s.u.) mit allen Versionen der Arduino Entwicklungsumgebung seit Version 1.8.6 (Release 2018) wird von uns getestet und sichergestellt. Falls Sie eine nicht unterst\u00fctzte Version der Arduino-Entwicklungsumgebung nutzen, k\u00f6nnen bei der Nutzung der Funktionen der desklab-Bibliothek Probleme und Fehler auftreten.","title":"2. Arduino IDE (Entwicklungsumgebung): Download &amp; Installation"},{"location":"start/installation/#3-arduino-bibliotheken","text":"In der desklab Arduino Bibliothek werden Funktionen zur Nutzung und Programmierung der Ger\u00e4te der desklab gUG bereitgestellt. Die Bibliothek kann in der Bibliotheksverwaltung der Arduino-Entwicklungsumgebung installiert werden. F\u00fchren Sie zur Installation der Arduino-Bibliothek die folgenden Schritte durch: 1) Trennen Sie per USB angeschlossene desklab-Ger\u00e4te von IhremComputer. 2) \u00d6ffnen Sie die Arduino-Entwicklungsumgebung. 3) \u00d6ffnen Sie die Bibliotheksverwaltung \u00fcber die Men\u00fcleiste der Entwicklungsumgebung. 4) Suchen Sie nach 'desklab' und installieren Sie die neueste Version der Bibliothek.","title":"3. Arduino Bibliotheken"},{"location":"start/installation/#4-upload-eines-beispiel-programms","text":"In der desklab Arduino Bibliothek sind mehrere Beispielprogramme enthalten, mit denen unter anderem das Photometer zur Messung der optischen Dichte genutzt werden kann. Um zu testen, ob alle Schritte erfolgreich durchgef\u00fchrt wurden, kann ein Beispielprogramm auf den Mikrocontroller geladen werden. Dazu muss die Arduino IDE gestartet und der Mikrocontroller per USB Kabel angeschlossen werden. Nach dem Start der Arduino IDE sollte zum Test ein Beispiel-Sketch der Bibliothek kompiliert und auf den Mikrocontroller geladen werden. Nach wenigen Sekunden sollte der Upload auf den Mikrocontroller abgeschlossen sein und das Programm wird automatisch gestartet.","title":"4. Upload eines Beispiel-Programms"}]}